<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端面试题</title>
    <url>/pipixia/2021/02/07/interview/</url>
    <content><![CDATA[<h2 id="圣杯布局、双飞翼布局">圣杯布局、双飞翼布局</h2>
<p><a href="/pipixia/2021/02/07/threecolumn/">圣杯布局、双飞翼布局</a></p>
<h2 id="line-height-如何继承">line-height 如何继承</h2>
<ul>
<li>写具体数值，如30px,则继承该值；</li>
<li>写比例，如2/15，则继承该比例；</li>
<li>写百分比，如200%，则继承计算出来的值（考点）</li>
</ul>
<h2 id="响应式布局">响应式布局</h2>
<ul>
<li><strong>rem</strong>是什么
<ul>
<li>弊端 阶梯性</li>
</ul>
</li>
<li><strong>vh</strong>、<strong>vw</strong></li>
</ul>
<h2 id="网页的视口尺寸">网页的视口尺寸</h2>
<blockquote>
<p>window.screen.height // 屏幕高度<br>
window.innerHeight // 网页视口高度<br>
document.body.clientHeight // body 高度</p>
</blockquote>
<p>vh 网页视口高度的 1/100<br>
vw 网页视口高度的 1/100<br>
vmax 取两者的最大值，vmin取两者的最小值</p>
<h2 id="盒模型宽度计算">盒模型宽度计算</h2>
<ul>
<li>offsetWidth = (内容宽度 + 内边距 + 边框)，无外边框</li>
<li>box-sizing:border-box</li>
</ul>
<h2 id="margin纵向重叠的问题">margin纵向重叠的问题</h2>
<ul>
<li>相邻元素的margin-top和margin-bottom会发生重叠</li>
<li>空白内容的<code>&lt;p&gt;&lt;/p&gt;</code>也会重叠</li>
</ul>
<h2 id="margin负值问题">margin负值问题</h2>
<ul>
<li>margin-top、margin-left 负值，元素向上、向左移动</li>
<li>margin-right负值，右侧元素左移，自身不受影响</li>
<li>margin-bottom负值，下方元素上移，自身不受影响</li>
</ul>
<h2 id="BFC理解和应用">BFC理解和应用</h2>
<ul>
<li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li>
<li>形成BFC的条件</li>
<li>BFC的常见应用，清除浮动</li>
</ul>
<h2 id="float布局">float布局</h2>
<ul>
<li>圣杯布局和双飞翼布局的技术总结
<ul>
<li>使用float布局</li>
<li>两侧使用margin负值，以便和中间内容横向重叠</li>
<li>防止中间内容被两侧覆盖，一个用padding 一个用margin</li>
</ul>
</li>
<li>手写clear fix<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.clearfix:after</span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token property">dispaly</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span><span class="token punctuation">{</span>
  *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span> <span class="token comment">/* 兼容IE低版本 */</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="flex布局">flex布局</h2>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* flex 画三个点的🎲 */</span>
<span class="token selector">.box</span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span>flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span>space-between<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token selector">.item:nth-child(2)</span><span class="token punctuation">{</span>
  <span class="token property">align-self</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.item:nth-child(3)</span><span class="token punctuation">{</span>
  <span class="token property">align-self</span><span class="token punctuation">:</span>flex-end<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="absolute和relative定位">absolute和relative定位</h2>
<ul>
<li>relative 依据自身定位</li>
<li>absolute 依据最近一层的定位元素定位</li>
</ul>
<h2 id="值类型和引用类型">值类型和引用类型</h2>
<p><img src="http://r7ibrwm6t.hb-bkt.clouddn.com/blog/images/2261645246745.png" alt="值类型存储"><br>
<img src="http://r7ibrwm6t.hb-bkt.clouddn.com/blog/images/2251645246183.jpg" alt="引用类型存储"></p>
<p><code>null</code> 特殊引用类型，指针指向为空地址<br>
<code>function fn() {}</code> 特殊引用类型，但不用于存储数据，所以没有’拷贝、复制函数’这一说法</p>
<h2 id="typeof运算符">typeof运算符</h2>
<ul>
<li>识别所有值类型</li>
<li>识别函数</li>
<li>判断是否是引用类型（不可再细分）</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 判断所有值类型</span>
<span class="token keyword">let</span> a<span class="token punctuation">;</span>                     <span class="token keyword">typeof</span> a <span class="token comment">// 'undefined'</span>
<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>         <span class="token keyword">typeof</span> str <span class="token comment">// 'string'</span>
<span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>             <span class="token keyword">typeof</span> n <span class="token comment">// 'number'</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">typeof</span> b <span class="token comment">// 'boolean'</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">typeof</span> s <span class="token comment">// 'symbol'</span>

<span class="token comment">// 能判断函数</span>
<span class="token keyword">typeof</span> console<span class="token punctuation">.</span>log  <span class="token comment">// 'function'</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// 'function'</span>

<span class="token comment">// 能识别引用类型（不能再继续识别）</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// ‘object’</span>
<span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span> <span class="token comment">// 'object'</span>
<span class="token keyword">typeof</span> <span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">100</span> <span class="token punctuation">}</span> <span class="token comment">// 'object'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="js深拷贝">js深拷贝</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">/**
 * 深拷贝
 * @param {Object} obj 要深拷贝但对象
 */</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">'object'</span> <span class="token operator">||</span> obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//obj是null，或者不是对象和数组，直接返回</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token comment">//初始化返回结果</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//保证key不是原型属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> result <span class="token comment">//返回结果</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="变量计算-类型转换">变量计算 - 类型转换</h2>
<ul>
<li>字符串拼接</li>
<li>==</li>
<li>if语句和逻辑运算</li>
</ul>
<h3 id="字符串拼接">字符串拼接</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 字符串拼接</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token comment">// 100</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token comment">// '10010'</span>
<span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">+</span> <span class="token string">'10'</span> <span class="token comment">// 'true10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="">==</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// == 运算符</span>
<span class="token number">100</span> <span class="token operator">==</span> <span class="token string">'100'</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment">// true</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token string">''</span> <span class="token comment">// true</span>
<span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>除了 <code>== null</code>之外，其他都一律用 <code>===</code>。<code>== null</code>时，值可能为null或undefined</p>
</blockquote>
<h3 id="if语句和逻辑运算">if语句和逻辑运算</h3>
<ul>
<li><code>truly</code>变量：<code>!!a === true</code> 的变量</li>
<li><code>falsely</code>变量：<code>!!a === false</code> 的变量</li>
</ul>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 以下是falsely变量，除此之外都是truly变量</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token string">''</span> <span class="token operator">===</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span> <span class="token operator">===</span> <span class="token boolean">false</span>
<span class="token operator">!</span><span class="token operator">!</span><span class="token boolean">false</span> <span class="token operator">===</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="原型和原型链">原型和原型链</h2>
<h3 id="class的基本使用、extends继承">class的基本使用、extends继承</h3>
<blockquote>
<p>引用阮老师ES6入门中对class类的讲解<br>
<a href="https://es6.ruanyifeng.com/#docs/class">class</a><br>
<a href="https://es6.ruanyifeng.com/#docs/class-extends">class-extends</a></p>
</blockquote>
<h3 id="instanceof-类型判断">instanceof 类型判断</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 现有父类People、子类Student、子类实例xialuo</span>
xialuo <span class="token keyword">instanceof</span> <span class="token class-name">Student</span> <span class="token comment">// true</span>
xialuo <span class="token keyword">instanceof</span> <span class="token class-name">People</span> <span class="token comment">// true</span>
xialuo <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span>

<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">instanceof</span> <span class="token class-name">Object</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="原型">原型</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//class 实际上是函数，可见是语法糖</span>
<span class="token keyword">typeof</span> People <span class="token comment">//'function'</span>
<span class="token keyword">typeof</span> Student <span class="token comment">//'function'</span>

<span class="token comment">//隐式原型和显式原型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xialuo<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xialuo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="原型图示">原型图示</h4>
<p><img src="http://r7ibrwm6t.hb-bkt.clouddn.com/blog/images/2281645256135.png" alt="原型图示"></p>
<h4 id="原型关系">原型关系</h4>
<blockquote>
<ul>
<li>每个class都有显示原型 <code>prototype</code></li>
<li>每个实例都有隐式原型 <code>__proto__</code></li>
<li>实例的<code>__proto__</code>指向class的 <code>prototype</code></li>
</ul>
</blockquote>
<h4 id="基于原型的执行规则">基于原型的执行规则</h4>
<ul>
<li>获取属性<code>xialuo.name</code> 或执行方法<code>xialuo.sayhi()</code>时</li>
<li>先在自身属性和方法寻找</li>
<li>如果找不到则自动去<code>__proto__</code>中查找</li>
</ul>
<h3 id="原型链">原型链</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto___<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">People</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">Student</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>___proto___<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="原型链图示">原型链图示</h4>
<p><img src="http://r7ibrwm6t.hb-bkt.clouddn.com/blog/images/2291645257234.png" alt="原型链图示"></p>
<h2 id="作用域和闭包">作用域和闭包</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//创建10个`&lt;a&gt;`标签，点击的时候弹出来对应的序号</span>
<span class="token keyword">let</span> i<span class="token punctuation">,</span> a
<span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
  a<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'&lt;br&gt;'</span>
  a<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  documnet<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 点击每个a标签打印的都是10</span>
<span class="token comment">// 正确实现应该将声明i放到for循环的块级作用域中</span>
<span class="token comment">//     let a</span>
<span class="token comment">//     for (let i=0;i&lt;10;i++){</span>
<span class="token comment">//     ......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="作用域">作用域</h3>
<ul>
<li>全局作用域</li>
<li>函数作用域</li>
<li>块级作用域（ES6新增）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// ES6块级作用域</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">100</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">//会报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="自由变量">自由变量</h3>
<ul>
<li>一个变量在当前作用域没有定义，但被使用了</li>
<li>向上级作用域，一层一层依次寻找，直至找到为止</li>
<li>如果到全局作用域都没找到，则报错 <code>xx is not defined</code></li>
</ul>
<h3 id="闭包">闭包</h3>
<blockquote>
<p>作用域应用的特殊情况，有两种表现</p>
<ul>
<li>函数作为参数被传递</li>
<li>函数作为返回值被返回</li>
</ul>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数作为返回值</span>
<span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">200</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>所有的自由遍变量的查找，是在函数定义的地方，向上级作用域查找，不是在执行的地方！！！</em></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// 函数作为参数</span>
<span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">200</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">print</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="this">this</h3>
<ul>
<li>在class方法中的调用</li>
<li>箭头函数</li>
</ul>
<blockquote>
<p><em>this取什么样的值，是在函数执行的时候确认的，不是在函数定义的时候确认的</em></p>
<ul>
<li>当作普通函数被调用 ==&gt; window</li>
<li>使用call apply bind ==&gt; 改变后的指向（第一个参数）</li>
<li>作为对象方法调用 ==&gt; 指向这个对象</li>
<li>构造函数或class的方法调用 ==&gt; 指向实例</li>
<li>箭头函数 ==&gt; 上级作用域的this的值</li>
</ul>
</blockquote>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//window</span>

<span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//{x:100}</span>

<span class="token keyword">const</span> fn2 <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// {x:200}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> zhangsan <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'张三'</span>，
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">waitAgain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>  <span class="token comment">//使用箭头函数</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
zhangsan<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//zhangsan对象</span>
zhagnsan<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//window</span>
zhagnsan<span class="token punctuation">.</span><span class="token function">waitAgain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//zhangsan对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
  <span class="token punctuation">}</span>
  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> zhangsan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>
zhangsan<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//zhangsan实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手写bind函数">手写bind函数</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind1</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span><span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//this 指向调用的函数</span>

  <span class="token comment">//非函数直接报错</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span> <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span> <span class="token punctuation">(</span><span class="token string">'not function'</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
  <span class="token comment">// arg是考虑可能分批传递参数</span>
  <span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//this 普通调用或分段传参数，指向顶层对象</span>
    <span class="token comment">//     构造函数调用指向实例</span>

    <span class="token comment">//如果普通方法，调用apply的第一个参数为content</span>
    <span class="token comment">//如果为构造函数，调用apply的第一个参数为实例（new调用）</span>
    <span class="token keyword">return</span> <span class="token function">self</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">fn</span> <span class="token operator">?</span> <span class="token keyword">this</span> <span class="token operator">:</span> context<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">...</span>rest<span class="token punctuation">,</span><span class="token operator">...</span>arg<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prototype
  fn<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fn<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">//是否要修改指向??? </span>

  <span class="token keyword">return</span> fn
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="实际开发中闭包的应用">实际开发中闭包的应用</h3>
<ul>
<li>隐藏数据（如做一个简单的cache工具）<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//闭包中的数据，被隐藏，不被外界访问</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">set</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> c <span class="token operator">=</span>  <span class="token function">createCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="异步和单线程">异步和单线程</h2>
<h3 id="异步">异步</h3>
<p>应用场景</p>
<ul>
<li>网络请求，如ajax图片加载</li>
<li>定时任务，如setTimeout</li>
</ul>
<h3 id="event-loop">event loop</h3>
<ul>
<li>js是单线程执行的</li>
<li>异步要基于回调来实现</li>
<li>event loop就是异步回调的实现原理</li>
</ul>
<h4 id="js如何执行">js如何执行</h4>
<ul>
<li>从前到后，一行一行执行</li>
<li>如果某一行执行报错，则停止下面代码的执行</li>
<li>先把同步代码执行完，再执行异步</li>
</ul>
<h4 id="event-loop过程">event loop过程</h4>
<blockquote>
<p><code>Call Stack</code><br>
<code>Web APIs</code><br>
<code>Event Loop</code><br>
<code>Callback Queue</code></p>
</blockquote>
<ul>
<li>同步代码，一行一行放在call stack执行</li>
<li>遇到异步，会先“记录”下，等待时机（定时、网络请求等）</li>
<li>时机到了，就移动到callback queue</li>
<li>如call stack为空（即同步代码执行完）event loop开始工作</li>
<li>轮训查找callback queue，如有则移动到call stack执行</li>
<li>然后继续轮训查找</li>
</ul>
<h2 id="promise">promise</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//promise加载图片</span>
<span class="token keyword">function</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token parameter">src</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">creatElement</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>
    img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">图片加载失败 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    img<span class="token punctuation">.</span>src <span class="token operator">=</span> src
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="async-await-和Promise的关系">async/await 和Promise的关系</h3>
<ol>
<li>执行async函数，返回的是promise对象</li>
</ol>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token number">100</span> <span class="token comment">// 相当于return Promise.resolve(100)</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> rest1 <span class="token operator">=</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//执行 async函数，返回的是一个promise对象</span>
<span class="token comment">// console.log('res1',res1) //promise对象</span>
res1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token comment">//100</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li>await 相当于promise的then</li>
</ol>
<blockquote>
<p>async定义的函数内 await后面的代码，都可以看作是callback里的内容，即异步（微任务）</p>
</blockquote>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> p1 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> p1 <span class="token comment">//await 相当于 Promise then</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token comment">// 300</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> data1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token number">400</span> <span class="token comment">//相当于await Promise.resolve(400)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data1'</span><span class="token punctuation">,</span>data1<span class="token punctuation">)</span> <span class="token comment">// 400</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> data2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data2'</span><span class="token punctuation">,</span>data2<span class="token punctuation">)</span> <span class="token comment">// 200</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="3">
<li><code>try...catch</code>可捕获异常，代替了promise的catch</li>
</ol>
  <pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> p4 <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'err'</span><span class="token punctuation">)</span> <span class="token comment">//rejected 状态</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> p4
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// try.catch 相当于 promise catch</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手写promise">手写promise</h3>
<blockquote>
<p>过程较为复杂，需要了解基本功能的实现过程，但不要求完全默写<br>
promise/A+ 规范<br>
参考该文章 <a href="https://zhuanlan.zhihu.com/p/183801144">https://zhuanlan.zhihu.com/p/183801144</a></p>
</blockquote>
<p><a href="/pipixia/2021/05/07/promise/">手写promise</a></p>
<ol>
<li>初始化异步调用</li>
<li>then,catch链式调用</li>
<li>API .resolve .reject .all .race</li>
</ol>
<h2 id="宏任务macroTask和微任务microTask">宏任务macroTask和微任务microTask</h2>
<h3 id="什么是宏任务，什么是微任务">什么是宏任务，什么是微任务</h3>
<ol>
<li>宏任务：setTimeout，setInterval，Ajax，DOM事件</li>
<li>微任务：Promise、async/await、MutationObserver、Object.observe、process.nextTick(Node.js 环境)</li>
<li>微任务执行时机比宏任务要早</li>
</ol>
<h3 id="宏任务、微任务和DOM渲染，在event-loop的过程">宏任务、微任务和DOM渲染，在event loop的过程</h3>
<blockquote>
<p>为什么微任务比宏任务触发时机更早？</p>
</blockquote>
<ol>
<li>每次call Stack空闲（即每次轮询结束）</li>
<li>执行当前的微任务（micro task queue）</li>
<li>DOM重新渲染，DOM结构如有改变则重新渲染</li>
<li>然后再去触发下一次Event Loop</li>
</ol>
<h3 id="宏任务和微任务的区别">宏任务和微任务的区别</h3>
<ol>
<li>宏任务：DOM渲染后触发，如 setTimeout</li>
<li>微任务：DOM渲染前触发，如 Promise</li>
<li>微任务是ES6语法规定的</li>
<li>宏任务是由浏览器规定的</li>
</ol>
]]></content>
      <categories>
        <category>前端面试题</category>
      </categories>
      <tags>
        <tag>前端面试题</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>手写promise</title>
    <url>/pipixia/2021/05/07/promise/</url>
    <content><![CDATA[<h2 id="基本功能333">基本功能333</h2>
<ol>
<li>Promise 就是一个类 在执行这个类的时候 需要传递一个执行器进去 执行器会立即执行</li>
<li>Promise 中有三种状态 分别为 成功 fulfilled 失败 rejected 等待 pending<br>
pending -&gt; fulfilled<br>
pending -&gt; rejected<br>
一旦状态确定就不可更改</li>
<li>resolve和reject函数是用来更改状态的<br>
resolve: fulfilled<br>
reject: rejected</li>
<li>then方法内部做的事情就判断状态 如果状态是成功 调用成功的回调函数 如果状态是失败 调用失败回调函数 then方法是被定义在原型对象中的</li>
<li>then成功回调有一个参数 表示成功之后的值 then失败回调有一个参数 表示失败后的原因</li>
<li>同一个promise对象下面的then方法是可以被调用多次的</li>
<li>then方法是可以被链式调用的, 后面then方法的回调函数拿到值的是上一个then方法的回调函数的返回值</li>
</ol>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> MyPromise <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./myPromise'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">p1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">p2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败'</span><span class="token punctuation">)</span>
    <span class="token comment">// resolve('成功');  </span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">reason</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="具体实现">具体实现</h2>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">'pending'</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">'fulfilled'</span><span class="token punctuation">;</span> <span class="token comment">// 成功</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">'rejected'</span><span class="token punctuation">;</span> <span class="token comment">// 失败</span>

<span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span> <span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">executor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resolve<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reject<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// promsie 状态 </span>
  status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>
  <span class="token comment">// 成功之后的值</span>
  value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token comment">// 失败后的原因</span>
  reason <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token comment">// 成功回调</span>
  successCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 失败回调</span>
  failCallback <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果状态不是等待 阻止程序向下执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 将状态更改为成功</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
    <span class="token comment">// 保存成功之后的值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 判断成功回调是否存在 如果存在 调用</span>
    <span class="token comment">// this.successCallback &amp;&amp; this.successCallback(this.value);</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果状态不是等待 阻止程序向下执行</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">// 将状态更改为失败</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>
    <span class="token comment">// 保存失败后的原因</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>
    <span class="token comment">// 判断失败回调是否存在 如果存在 调用</span>
    <span class="token comment">// this.failCallback &amp;&amp; this.failCallback(this.reason);</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">then</span> <span class="token punctuation">(</span><span class="token parameter">successCallback<span class="token punctuation">,</span> failCallback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 参数可选</span>
    successCallback <span class="token operator">=</span> successCallback <span class="token operator">?</span> <span class="token function-variable function">successCallback</span> <span class="token operator">:</span> <span class="token parameter">value</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">;</span>
    <span class="token comment">// 参数可选</span>
    failCallback <span class="token operator">=</span> failCallback <span class="token operator">?</span> <span class="token function-variable function">failCallback</span><span class="token operator">:</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> reason <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> promsie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 判断状态</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断 x 的值是普通值还是promise对象</span>
            <span class="token comment">// 如果是普通值 直接调用resolve </span>
            <span class="token comment">// 如果是promise对象 查看promsie对象返回的结果 </span>
            <span class="token comment">// 再根据promise对象返回的结果 决定调用resolve 还是调用reject</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promsie2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">failCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 判断 x 的值是普通值还是promise对象</span>
            <span class="token comment">// 如果是普通值 直接调用resolve </span>
            <span class="token comment">// 如果是promise对象 查看promsie对象返回的结果 </span>
            <span class="token comment">// 再根据promise对象返回的结果 决定调用resolve 还是调用reject</span>
            <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promsie2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
          <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 等待</span>
        <span class="token comment">// 将成功回调和失败回调存储起来</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>successCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">successCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">// 判断 x 的值是普通值还是promise对象</span>
              <span class="token comment">// 如果是普通值 直接调用resolve </span>
              <span class="token comment">// 如果是promise对象 查看promsie对象返回的结果 </span>
              <span class="token comment">// 再根据promise对象返回的结果 决定调用resolve 还是调用reject</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promsie2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>failCallback<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
              <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">failCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token comment">// 判断 x 的值是普通值还是promise对象</span>
              <span class="token comment">// 如果是普通值 直接调用resolve </span>
              <span class="token comment">// 如果是promise对象 查看promsie对象返回的结果 </span>
              <span class="token comment">// 再根据promise对象返回的结果 决定调用resolve 还是调用reject</span>
              <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promsie2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> promsie2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">finally</span> <span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> MyPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> reason <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">catch</span> <span class="token punctuation">(</span>failCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> failCallback<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">all</span> <span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">function</span> <span class="token function">addData</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        result<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> current <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// promise 对象</span>
          current<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">value</span> <span class="token operator">=&gt;</span> <span class="token function">addData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token parameter">reason</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 普通值</span>
          <span class="token function">addData</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">static</span> <span class="token function">resolve</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyPromise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">resolvePromise</span> <span class="token punctuation">(</span><span class="token parameter">promsie2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promsie2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">'Chaining cycle detected for promise #&lt;Promise&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token keyword">instanceof</span> <span class="token class-name">MyPromise</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// promise 对象</span>
    <span class="token comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason));</span>
    x<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 普通值</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> MyPromise<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>手写promise</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>手写promise</tag>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>圣杯布局、双飞翼布局</title>
    <url>/pipixia/2021/02/07/threecolumn/</url>
    <content><![CDATA[<h2 id="目的">目的</h2>
<ul>
<li>三栏布局</li>
<li>优先加载三栏中的内容部分（center）</li>
<li>兼容浏览器低版本（不使用flex）</li>
</ul>
<h2 id="原理">原理</h2>
<ul>
<li>BFC</li>
<li>float布局</li>
<li>margin负值</li>
</ul>
<h2 id="区别">区别</h2>
<ul>
<li>圣杯布局html结构相对双飞翼布局更好</li>
<li>圣杯布局左栏需要使用<code>position: relative</code>定位</li>
<li>双飞翼布局有更小的最小宽度支持</li>
<li>圣杯使用父容器pading空出<code>left</code>和<code>right</code>的位置，双飞翼使用<code>center</code>的margin空出<code>left</code>和<code>right</code>的位置</li>
</ul>
<h2 id="具体实现-2">具体实现</h2>
<h3 id="圣杯布局">圣杯布局</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 圣杯布局 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>300px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token comment">/* 200+150+200=550px： */</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> 550px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#header</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#footer</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 以下是重点实现部分 */</span>
<span class="token selector">#container</span> <span class="token punctuation">{</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.clearfix::after</span><span class="token punctuation">{</span>
  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span><span class="token punctuation">{</span>
  <span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#container .column</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#center</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">right</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="双飞翼布局">双飞翼布局</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 双飞翼布局 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>column<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">background</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span>100%</span><span class="token punctuation">"</span></span></span><span class="token punctuation">&gt;</span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">body</span> <span class="token punctuation">{</span>
  <span class="token property">min-width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#header</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#footer</span> <span class="token punctuation">{</span>
  <span class="token property">background</span><span class="token punctuation">:</span> grey<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 以下是重点实现部分 */</span>
<span class="token selector">#container</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.column</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#center</span> <span class="token punctuation">{</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#left</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -100%<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">#right</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 150px<span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> -150px<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="flex实现">flex实现</h3>
<blockquote>
<p>实现比较简单，但因为flex兼容性端问题，移动端使用基本没有问题，pc端就算了</p>
</blockquote>
<ul>
<li>元素在容器内按中、左、右的顺序排列（为了优先加载center）</li>
<li>使用<code>order</code>定义弹性盒子内子元素的显示顺序为左&lt;中&lt;右</li>
</ul>
]]></content>
      <categories>
        <category>圣杯布局、双飞翼布局</category>
      </categories>
      <tags>
        <tag>css布局</tag>
        <tag>css</tag>
        <tag>float</tag>
        <tag>margin负值</tag>
      </tags>
  </entry>
  <entry>
    <title>viewer.js</title>
    <url>/pipixia/2018/09/04/viewer/</url>
    <content><![CDATA[<h3 id="插件安装">插件安装</h3>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">npm install viewerjs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="插件引入">插件引入</h3>
<pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">import Viewer from 'viewerjs';
import 'viewerjs/dist/viewer.css';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="html部分">html部分</h3>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewerDom<span class="token punctuation">"</span></span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>xxx.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
或者
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewerDom<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in imgList<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
或者
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>viewerDom<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in imgList<span class="token punctuation">"</span></span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="调用插件">调用插件</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">//具体需要哪些配置可参照下表</span>
<span class="token keyword">const</span> ViewerDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#viewerDom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>viewer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Viewer</span><span class="token punctuation">(</span>ViewerDom<span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">initialViewIndex</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     <span class="token literal-property property">button</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//右上角关闭按钮</span>
     <span class="token literal-property property">navbar</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
     <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     <span class="token literal-property property">toolbar</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
     <span class="token literal-property property">keyboard</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token function-variable function">ready</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">show</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">shown</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">hide</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">hidden</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">view</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">viewed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">zoom</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token punctuation">,</span>
     <span class="token function-variable function">zoomed</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="键盘事件">键盘事件</h3>
<blockquote>
<p>仅在modal mode下可用<br>
ESC 键: 退出全屏/关闭/退出/停止播放;<br>
Space 键: 停止/播放;<br>
←键: 查看上一张图片;<br>
→键: 查看下一张图片;<br>
↑键: 放大图片;<br>
↓键: 缩小图片;<br>
Ctrl + 0 组合键: 缩小到初始大小;<br>
Ctrl + 1 组合键: 放大到原始大小;</p>
</blockquote>
<h3 id="配置参数">配置参数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">参数名称</th>
<th style="text-align:center">参数类型</th>
<th style="text-align:center">默认值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">initialViewIndex</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">0</td>
<td style="text-align:left">定义用于查看的图像的初始索引</td>
</tr>
<tr>
<td style="text-align:center">inline</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">false</td>
<td style="text-align:left">支持 inline mode</td>
</tr>
<tr>
<td style="text-align:center">button</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否显示查看图片时右上角的关闭按钮</td>
</tr>
<tr>
<td style="text-align:center">navbar</td>
<td style="text-align:center">Boolean / Number</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否显示底部导航栏  0 或者 false :不显示 <code>1 </code>或者 true :显示 <code>2</code> :当屏幕宽度大于768px时显示 <code>3</code> :当屏幕宽度大于992px时显示<code>4</code>:当屏幕宽度大于1200px时显示</td>
</tr>
<tr>
<td style="text-align:center">title</td>
<td style="text-align:center">Boolean / Number /Function / Array</td>
<td style="text-align:center">true</td>
<td style="text-align:left">0 或者 false 时不显示<code>1</code>或者true者function或者array时显示<code>2</code> :当屏幕宽度大于768px时显示<code> 3</code> :当屏幕宽度大于992px时显示 <code>4</code> :当屏幕宽度大于1200px时显示function 在函数体内返回标题array 第一个参数表示可见性(0-4) 第二个参数就是标题</td>
</tr>
<tr>
<td style="text-align:center">toolbar</td>
<td style="text-align:center">Boolean / Number / Object</td>
<td style="text-align:center">true</td>
<td style="text-align:left">标题栏是否显示和布局&nbsp;<code>0&nbsp;</code>或者&nbsp;<code>false</code>&nbsp;时不显示<code>1</code>或者<code>true</code>或者时显示<code>2&nbsp;</code>:当屏幕宽度大于768px时显示&nbsp;<code>3&nbsp;</code>:当屏幕宽度大于992px时显示&nbsp;<code>4&nbsp;</code>:当屏幕宽度大于1200px时显示&nbsp;<code>Object</code></td>
</tr>
<tr>
<td style="text-align:center">tooltip</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">放大或缩小时显示的百分比的文字提示<code>true</code> : 显示 <code>false</code> : 不显示</td>
</tr>
<tr>
<td style="text-align:center">movable</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否可以拖动图片</td>
</tr>
<tr>
<td style="text-align:center">zoomable</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否可以缩放图片</td>
</tr>
<tr>
<td style="text-align:center">rotatable</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否可以旋转图片</td>
</tr>
<tr>
<td style="text-align:center">scalable</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否可以缩放图片</td>
</tr>
<tr>
<td style="text-align:center">transition</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">为一些特殊元素启用CSS3转换。</td>
</tr>
<tr>
<td style="text-align:center">fullscreen</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">允许全屏播放</td>
</tr>
<tr>
<td style="text-align:center">keyboard</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">启用键盘支持</td>
</tr>
<tr>
<td style="text-align:center">backdrop</td>
<td style="text-align:center">Boolean / String</td>
<td style="text-align:center">true</td>
<td style="text-align:left">启用 modal 为false的时候不支持点击背景关闭</td>
</tr>
<tr>
<td style="text-align:center">loading</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">加载图片的时候的loading图标</td>
</tr>
<tr>
<td style="text-align:center">loop</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">是否可以循环查看图片</td>
</tr>
<tr>
<td style="text-align:center">interval</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">5000</td>
<td style="text-align:left">定义图片查看器的最小的宽度</td>
</tr>
<tr>
<td style="text-align:center">minWidth</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">200</td>
<td style="text-align:left">定义图片查看器的最小的高度</td>
</tr>
<tr>
<td style="text-align:center">minHeight</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">100</td>
<td style="text-align:left">播放图片时 距离下一张图片的间隔时间</td>
</tr>
<tr>
<td style="text-align:center">zoomRatio</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">0.1</td>
<td style="text-align:left">利用鼠标滚轮缩放图片时的比例</td>
</tr>
<tr>
<td style="text-align:center">minZoomRatio</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">0.01</td>
<td style="text-align:left">缩小图片的最小比例</td>
</tr>
<tr>
<td style="text-align:center">maxZoomRatio</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">100</td>
<td style="text-align:left">放大图片的放大比例</td>
</tr>
<tr>
<td style="text-align:center">zIndex</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">2015</td>
<td style="text-align:left">定义查看器的CSS z-index值 modal 模式下</td>
</tr>
<tr>
<td style="text-align:center">zIndexInline</td>
<td style="text-align:center">Number</td>
<td style="text-align:center">0</td>
<td style="text-align:left">定义查看器的CSS z-index值 inline 模式下</td>
</tr>
<tr>
<td style="text-align:center">url</td>
<td style="text-align:center">String / Function</td>
<td style="text-align:center">src</td>
<td style="text-align:left">原始图像URL如果是一个字符串，应该图像元素的属性之一如果是一个函数，应该返回一个有效的图像URL</td>
</tr>
<tr>
<td style="text-align:center">container</td>
<td style="text-align:center">Element / String</td>
<td style="text-align:center">body</td>
<td style="text-align:left">将查看器置于modal模式的容器 只有在 inline为 false的时候才可以使用</td>
</tr>
<tr>
<td style="text-align:center">filter</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">过滤图像以便查看(如果图像是可见的，应该返回true)</td>
</tr>
<tr>
<td style="text-align:center">toggleOnDblclick</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">true</td>
<td style="text-align:left">当你放大或者缩小图片时 双击还原</td>
</tr>
<tr>
<td style="text-align:center">ready</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当查看图片时被触发的函数 只会触发一次</td>
</tr>
<tr>
<td style="text-align:center">show</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当查看图片时被触发的函数 每次查看都会触发</td>
</tr>
<tr>
<td style="text-align:center">shown</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当查看图片时被触发的函数 每次查看都会触发 在show之后</td>
</tr>
<tr>
<td style="text-align:center">hide</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当关闭图片查看器时被触发的函数 每次关闭都会触发</td>
</tr>
<tr>
<td style="text-align:center">hidden</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当关闭图片查看器时被触发的函数 每次关闭都会触发 在hide之后</td>
</tr>
<tr>
<td style="text-align:center">view</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当查看图片时被触发的函数 每次查看都会触发 在shown之后</td>
</tr>
<tr>
<td style="text-align:center">viewed</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">当查看图片时被触发的函数 每次查看都会触发 在view之后</td>
</tr>
<tr>
<td style="text-align:center">zoom</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">在图片缩放时触发</td>
</tr>
<tr>
<td style="text-align:center">zoomed</td>
<td style="text-align:center">Function</td>
<td style="text-align:center">null</td>
<td style="text-align:left">在图片缩放时触发 在 zoom之后</td>
</tr>
</tbody>
</table>
<h3 id="toolbar-Object详解">toolbar Object详解</h3>
<blockquote>
<p>key值列表: “zoomIn”, “zoomOut”, “oneToOne”, “reset”, “prev”, “play”, “next”, “rotateLeft”, “rotateRight”, “flipHorizontal”, “flipVertical”</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">key值名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">zoomIn</td>
<td style="text-align:center">放大图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">zoomOut</td>
<td style="text-align:center">缩小图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">reset</td>
<td style="text-align:center">重置图片大小的按钮</td>
</tr>
<tr>
<td style="text-align:center">prev</td>
<td style="text-align:center">查看上一张图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">next</td>
<td style="text-align:center">查看上一张图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">play</td>
<td style="text-align:center">播放图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">rotateLeft</td>
<td style="text-align:center">向左旋转图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">rotateRight</td>
<td style="text-align:center">向右旋转图片的按钮</td>
</tr>
<tr>
<td style="text-align:center">flipHorizontal</td>
<td style="text-align:center">图片左右翻转的按钮</td>
</tr>
<tr>
<td style="text-align:center">flipVertical</td>
<td style="text-align:center">图片上下翻转的按钮</td>
</tr>
</tbody>
</table>
<p>{key:number|Boolean} 显示或者隐藏对应key的按钮 为Number的时候为可见性<br>
{key: String } 自定义按钮的大小<br>
{ key: Function } 自定义按钮点击的处理<br>
{ key: { show: Boolean | Number, size: String, click: Function } 自定义按钮的每个属性<br>
size的取值范围: small medium default large;</p>
<h3 id="方法">方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">key值名称</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>show()</code></td>
<td style="text-align:center">显示显示器</td>
</tr>
<tr>
<td style="text-align:center"><code>hide()</code></td>
<td style="text-align:center">关闭显示器</td>
</tr>
<tr>
<td style="text-align:center"><code>view()</code></td>
<td style="text-align:center">查看视频索引</td>
</tr>
<tr>
<td style="text-align:center"><code>prev()</code></td>
<td style="text-align:center">指示当前是第一个时转向查看最后一个</td>
</tr>
<tr>
<td style="text-align:center"><code>next()</code></td>
<td style="text-align:center">指示当前是最后一个时转向查看第一个</td>
</tr>
<tr>
<td style="text-align:center"><code>move(offsetX [，offsetY])</code></td>
<td style="text-align:center"><code>offsetX</code>:水平滑动；<code>offsetY</code>(可选)：垂直滑动</td>
</tr>
<tr>
<td style="text-align:center"><code>moveTo(x,[, y])</code></td>
<td style="text-align:center"><code>x</code>:图片left值;<code>y</code>:图片top值(可选),不填时默认为<code>x</code>的值;</td>
</tr>
<tr>
<td style="text-align:center"><code>zoom(ratio[, hasTooltip])</code></td>
<td style="text-align:center">radio:放大缩小比例;hasTooltip:显示工具提示(可选);</td>
</tr>
<tr>
<td style="text-align:center"><code>zoomTo（ratio [，hasTooltip]）</code></td>
<td style="text-align:center">将图像缩放到绝对比例。</td>
</tr>
<tr>
<td style="text-align:center"><code>rotate(degree)</code></td>
<td style="text-align:center">使用相对度旋转图像。</td>
</tr>
<tr>
<td style="text-align:center"><code>rotateTo(degree)</code></td>
<td style="text-align:center">将图像旋转到绝对程度</td>
</tr>
<tr>
<td style="text-align:center"><code>scale(scaleX[, scaleY])</code></td>
<td style="text-align:center">缩放</td>
</tr>
<tr>
<td style="text-align:center"><code>scaleX(scaleX)</code></td>
<td style="text-align:center">缩放图像的横坐标</td>
</tr>
<tr>
<td style="text-align:center"><code>scaleY(scaleY)</code></td>
<td style="text-align:center">缩放图像的纵坐标</td>
</tr>
<tr>
<td style="text-align:center"><code>play([fullscreen])</code></td>
<td style="text-align:center">指示请求是否全屏(可选)</td>
</tr>
<tr>
<td style="text-align:center"><code>stop()</code></td>
<td style="text-align:center">停止播放</td>
</tr>
<tr>
<td style="text-align:center"><code>full()</code></td>
<td style="text-align:center">使用modal mode</td>
</tr>
<tr>
<td style="text-align:center"><code>exit()</code></td>
<td style="text-align:center">退出modal mode</td>
</tr>
<tr>
<td style="text-align:center"><code>tooltip()</code></td>
<td style="text-align:center">显示图像的当前比率和百分比</td>
</tr>
<tr>
<td style="text-align:center"><code>toggle()</code></td>
<td style="text-align:center">在自然大小和初始大小之间切换图像大小</td>
</tr>
<tr>
<td style="text-align:center"><code>reset()</code></td>
<td style="text-align:center">初始化图片</td>
</tr>
<tr>
<td style="text-align:center"><code>update()</code></td>
<td style="text-align:center">更改（添加，删除或排序）源图像时更新查看器实例。如果动态加载图像（使用XMLHTTPRequest），则可以使用此方法将新图像添加到查看器实例。</td>
</tr>
<tr>
<td style="text-align:center"><code>destroy()</code></td>
<td style="text-align:center">销毁查看器并删除实例</td>
</tr>
</tbody>
</table>
<h3 id="event">event</h3>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> viewer<span class="token punctuation">;</span>

image<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'viewed'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewer <span class="token operator">===</span> viewer<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// &gt; true</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

viewer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Viewer</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>ready、show、shown、hide、hidden、view、viewed、zoom、zoomed</p>
</blockquote>
<h3 id="插件官方git地址"><a href="https://github.com/fengyuanchen/viewerjs/blob/master/README.md">插件官方git地址</a></h3>
<h3 id="插件demo地址"><a href="http://fengyuanchen.github.io/viewerjs/">插件demo地址</a></h3>
]]></content>
      <categories>
        <category>viewer</category>
      </categories>
      <tags>
        <tag>viewer</tag>
        <tag>前端图片预览</tag>
      </tags>
  </entry>
  <entry>
    <title>Vscode插件分享</title>
    <url>/pipixia/2017/02/07/vscode/</url>
    <content><![CDATA[<h1>1.<a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments</a></h1>
<blockquote>
<p>编写更加人性化的注释</p>
</blockquote>
<h1>2.<a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a></h1>
<blockquote>
<p>改变代码中的括号颜色,一层括号一个颜色，点击一个括号，会用实线将本身和另一半括号链接，便于区分。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/16080040-12dda6b47488e52b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Bracket Pair Colorizer.jpg"></p>
<h1>3.<a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code</a></h1>
<blockquote>
<p>Visual Studio Code汉化</p>
</blockquote>
<h1>4.<a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek">CSS Peek</a></h1>
<blockquote>
<p>使用此插件，你可以追踪至样式表中 CSS 类和 ids 定义的地方。当你在 HTML 文件中右键单击选择器时，选择“ Go to Definition 和 Peek definition ”选项，它便会给你发送样式设置的 CSS 代码。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/16080040-12f1b0bb76f731b4.gif?imageMogr2/auto-orient/strip" alt="css peek.gif"></p>
<h1>5.<a href="https://marketplace.visualstudio.com/items?itemName=cipchk.cssrem">cssrem</a></h1>
<blockquote>
<p>css转rem插件，很方便，特别针对常写移动端适应布局。</p>
</blockquote>
<h1>6.<a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens — Git supercharged</a></h1>
<blockquote>
<p>git插件，不多说了。</p>
</blockquote>
<h1>7.<a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></h1>
<blockquote>
<p>css提示，支持vue</p>
</blockquote>
<h1>8.<a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">Import Cost</a></h1>
<blockquote>
<p>显示引入包的文件大小。</p>
</blockquote>
<h1>9.<a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></h1>
<blockquote>
<p>启动本地服务，必备</p>
</blockquote>
<h1>10.<a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h1>
<blockquote>
<p>路径提示</p>
</blockquote>
<h1>11.<a href="https://marketplace.visualstudio.com/items?itemName=albert.TabOut">TabOut</a></h1>
<blockquote>
<p>tab键跳出括号，很实用</p>
</blockquote>
<h1>12.<a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></h1>
<blockquote>
<p>目前比较好的Vue语法高亮，vue项目必备插件</p>
</blockquote>
<h1>13.<a href="https://marketplace.visualstudio.com/items?itemName=mikey.vscode-fileheader">vscode-fileheader</a></h1>
<blockquote>
<p>添加作者详情插件。自动更新最后修改时间，最后修改人。配置后<br>
<code>control+option+i</code>添加，适合多人开发的项目。</p>
</blockquote>
<pre class="line-numbers language-Code" data-language="Code"><code class="language-Code">//用户配置
"fileheader.Author": "author",
"fileheader.LastModifiedBy": "author"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1>14.<a href="https://marketplace.visualstudio.com/items?itemName=robertohuertasm.vscode-icons">vscode-icons</a></h1>
<blockquote>
<p>文件图标美化。</p>
</blockquote>
<h1>15.<a href="https://marketplace.visualstudio.com/items?itemName=bradgashler.htmltagwrap">htmltagwrap</a></h1>
<blockquote>
<p>html代码填充</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/16080040-a152811435bb1a65.gif?imageMogr2/auto-orient/strip" alt="htmltagwrap.gif"></p>
<h1>16.<a href="https://marketplace.visualstudio.com/items?itemName=kisstkondoros.vscode-gutter-preview">Image Preview</a></h1>
<blockquote>
<p>代码中选中图片路径即可预览图像</p>
</blockquote>
<h1>17.<a href="https://marketplace.visualstudio.com/items?itemName=gencer.html-slim-scss-css-class-completion">IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS</a></h1>
<blockquote>
<p>把项目中 css 文件里的名称智能提示在 html 中</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/16080040-46b02f45e981b3ec.gif?imageMogr2/auto-orient/strip" alt="IntelliSense for CSS, SCSS class names in HTML, Slim and SCSS.gif"></p>
<h1>18.<a href="https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments">Better Comments</a></h1>
<blockquote>
<p>多色代码注释，颜色可配置。</p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/16080040-fa76fe2b1f2dfbdb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="js注释"><br>
<img src="https://upload-images.jianshu.io/upload_images/16080040-d8921f29420934f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css注释"></p>
]]></content>
      <categories>
        <category>Vscode</category>
      </categories>
      <tags>
        <tag>Vscode</tag>
        <tag>前端开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack</title>
    <url>/pipixia/2021/02/07/webpack/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
